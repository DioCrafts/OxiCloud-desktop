pluginManagement {
    def flutterSdkPath = {
        def properties = new Properties()
        def propertiesFile = new File(settingsDir.parentFile, 'local.properties')
        if (propertiesFile.exists()) {
            propertiesFile.withReader('UTF-8') { reader -> properties.load(reader) }
        }
        def flutterSdkPath = properties.getProperty('flutter.sdk')
        if (flutterSdkPath == null) {
            flutterSdkPath = System.getenv('FLUTTER_ROOT')
        }
        assert flutterSdkPath != null, "flutter.sdk not set in local.properties and FLUTTER_ROOT not set in environment"
        return flutterSdkPath
    }()

    includeBuild("${flutterSdkPath}/packages/flutter_tools/gradle")

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }

    plugins {
        id "dev.flutter.flutter-gradle-plugin" version "1.0.0" apply false
        id 'com.android.application' version '8.10.0' apply false
        id 'com.android.library' version '8.10.0' apply false
        id 'org.jetbrains.kotlin.android' version '2.1.20' apply false
    }
}

// Define flutterSdkPath at root level
def flutterSdkPath = {
    def properties = new Properties()
    def propertiesFile = new File(settingsDir.parentFile, 'local.properties')
    if (propertiesFile.exists()) {
        propertiesFile.withReader('UTF-8') { reader -> properties.load(reader) }
    }
    def sdkPath = properties.getProperty('flutter.sdk')
    if (sdkPath == null) {
        sdkPath = System.getenv('FLUTTER_ROOT')
    }
    assert sdkPath != null, "flutter.sdk not set in local.properties and FLUTTER_ROOT not set in environment"
    return sdkPath
}()

include ":app"

// No longer use the deprecated plugin loader
// apply from: "${flutterSdkPath}/packages/flutter_tools/gradle/app_plugin_loader.gradle"
