name: Release Build

on:
  release:
    types: [created]

permissions:
  contents: write
  packages: write
  deployments: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        # Install build-essential package for ld linker and other build tools
        sudo apt-get install -y build-essential binutils
        # Install SQLite and other required dependencies
        sudo apt-get install -y libsqlite3-dev
        # Ensure the linker is properly installed and available
        sudo apt-get install -y lld clang
        # Verify ld is available
        which ld
        ld --version
        # Try first with libwebkit2gtk-4.1-dev, fall back to 4.0 if not available
        if ! sudo apt-get install -y libssl-dev pkg-config libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev gcc; then
          echo "libwebkit2gtk-4.1-dev not found, trying with 4.0 version"
          sudo apt-get install -y libssl-dev pkg-config libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev gcc
        fi
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        
    - name: Build for Linux
      run: |
        # Install target for Linux explicitly
        rustup target add x86_64-unknown-linux-gnu
        
        # Configure Rust to use gcc as linker for this target
        mkdir -p ~/.cargo
        cat > ~/.cargo/config.toml << EOF
        [target.x86_64-unknown-linux-gnu]
        linker = "gcc"
        rustflags = ["-C", "link-arg=-fuse-ld=lld"]
        EOF
        
        # Build with explicit target
        cargo build --release --target x86_64-unknown-linux-gnu
        
        # Create symlink to make paths consistent with rest of workflow
        mkdir -p target/release
        ln -sf target/x86_64-unknown-linux-gnu/release/oxicloud-desktop target/release/
      
    - name: Create tarball
      run: |
        mkdir -p OxiCloud-Linux
        cp target/release/oxicloud-desktop OxiCloud-Linux/
        cp README.md OxiCloud-Linux/
        cp LICENSE OxiCloud-Linux/
        tar -czvf OxiCloud-Desktop-Linux-x86_64.tar.gz OxiCloud-Linux
      
    - name: Upload Linux build
      uses: actions/upload-artifact@v4
      with:
        name: oxicloud-desktop-linux
        path: OxiCloud-Desktop-Linux-x86_64.tar.gz
        
    - name: Create DEB package
      run: |
        cargo install cargo-deb --force
        cargo deb
        mkdir -p deb-package
        find target/debian -name "*.deb" -exec cp {} deb-package/OxiCloud-Desktop-Linux.deb \;
        
    - name: Upload DEB package
      uses: actions/upload-artifact@v4
      with:
        name: oxicloud-desktop-deb
        path: deb-package/OxiCloud-Desktop-Linux.deb
        
    - name: Upload to Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          OxiCloud-Desktop-Linux-x86_64.tar.gz
          deb-package/OxiCloud-Desktop-Linux.deb

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        
    - name: Install WiX Toolset and cargo-wix
      run: |
        # Install WiX Toolset - required for cargo-wix to work
        Write-Host "Downloading WiX Toolset..."
        Invoke-WebRequest -Uri "https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip" -OutFile "wix-binaries.zip"
        Write-Host "Extracting WiX Toolset..."
        Expand-Archive -Path "wix-binaries.zip" -DestinationPath "wix-binaries"
        
        # Add WiX binaries to PATH - make sure to use absolute path
        $wixBinPath = Resolve-Path "wix-binaries"
        Write-Host "WiX binaries path: $wixBinPath"
        $env:PATH = "$env:PATH;$wixBinPath"
        [Environment]::SetEnvironmentVariable("Path", $env:PATH, "Machine")
        
        # Verify WiX Toolset is installed
        Write-Host "Verifying WiX Toolset installation..."
        try {
            $candleVersion = & "$wixBinPath\candle.exe" -? | Select-String -Pattern "Windows Installer XML Toolset Compiler"
            Write-Host "WiX Toolset candle.exe found: $candleVersion"
            
            $lightVersion = & "$wixBinPath\light.exe" -? | Select-String -Pattern "Windows Installer XML Toolset Linker"
            Write-Host "WiX Toolset light.exe found: $lightVersion"
        } catch {
            Write-Host "Error verifying WiX tools: $_"
            exit 1
        }
        
        # Install cargo-wix
        Write-Host "Installing cargo-wix..."
        cargo install cargo-wix --force
      shell: pwsh
        
    - name: Build for Windows
      run: |
        # Install Windows target
        rustup target add x86_64-pc-windows-msvc
        
        # Build with explicit target
        cargo build --release --target x86_64-pc-windows-msvc
        
        # Ensure path exists for the rest of workflow
        mkdir -p target\release -ErrorAction SilentlyContinue
        Copy-Item -Path "target\x86_64-pc-windows-msvc\release\oxicloud-desktop.exe" -Destination "target\release\" -ErrorAction SilentlyContinue
      shell: pwsh
      
    - name: Create zip
      run: |
        New-Item -ItemType Directory -Path OxiCloud-Windows
        Copy-Item target\release\oxicloud-desktop.exe OxiCloud-Windows\
        Copy-Item README.md OxiCloud-Windows\
        Copy-Item LICENSE OxiCloud-Windows\
        Compress-Archive -Path OxiCloud-Windows\* -DestinationPath OxiCloud-Desktop-Windows-x86_64.zip
      shell: pwsh
      
    - name: Create placeholder icon
      run: |
        # Create a simple 16x16 black box as icon.ico
        $iconPath = "icon.ico"
        if (-not (Test-Path $iconPath)) {
          # Create a minimal empty icon file for cargo-wix
          [byte[]]$iconBytes = @(
            0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x10, 0x10, 0x00, 0x00, 0x01, 0x00,
            0x20, 0x00, 0x68, 0x04, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x28, 0x00,
            0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00
          )
          for ($i = 0; $i -lt 1024; $i++) {
            $iconBytes += 0x00
          }
          [System.IO.File]::WriteAllBytes($iconPath, $iconBytes)
          Write-Host "Created placeholder icon.ico file"
        }
      shell: pwsh
      
    - name: Initialize and build MSI installer
      run: |
        # Ensure WiX binaries are in the PATH
        $wixBinPath = Resolve-Path "wix-binaries"
        $env:PATH = "$env:PATH;$wixBinPath"
        
        # List WiX tools to verify they're accessible
        Write-Host "WiX tools available:"
        Get-ChildItem -Path $wixBinPath -Filter "*.exe" | ForEach-Object { Write-Host "- $($_.Name)" }
        
        # Initialize the WiX configuration if needed
        if (-not (Test-Path "wix\main.wxs")) {
          Write-Host "Initializing WiX configuration..."
          cargo wix init --force
        }
        
        # Verify the wix directory exists and has necessary files
        Get-ChildItem -Path "wix" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "WiX config file: $($_.Name)" }
        
        # Create a variables file with appropriate parameters for WiX
        $wxsVars = @"
        <?xml version="1.0" encoding="utf-8"?>
        <WixVariables>
            <WixVariable Name="OxiCloudDesktopBinary" Value="target\release\oxicloud-desktop.exe" />
            <WixVariable Name="OxiCloudDesktopIcon" Value="icon.ico" />
            <WixVariable Name="AddDesktopShortcut" Value="true" />
            <WixVariable Name="Version" Value="0.1.0" />
        </WixVariables>
        "@
        Set-Content -Path "wix\variables.wxs" -Value $wxsVars
        
        # Set environment variables for cargo-wix
        Write-Host "Setting up cargo-wix environment variables..."
        $env:CARGO_WIX_SKIP_BUILD = "true"  # Skip rebuild since we already built
        $env:CARGO_WIX_VERBOSE = "true"     # Enable verbose output
        $env:CARGO_WIX_NOCAPTURE = "true"   # Don't capture output
        
        # Run cargo-wix with detailed debugging
        Write-Host "Running cargo-wix to build MSI..."
        try {
            cargo wix --nocapture --no-build --verbose
            Write-Host "cargo-wix command completed"
        } catch {
            Write-Host "Error running cargo-wix: $_"
            # Continue even if it fails, as we have a fallback
        }
        
        # Verify MSI creation
        $msiPath = Get-ChildItem -Path "target\wix\*.msi" -ErrorAction SilentlyContinue
        if ($msiPath) {
          Write-Host "MSI created successfully at: $msiPath"
        } else {
          Write-Host "MSI creation failed. Continuing to fallback..."
        }
      shell: pwsh
      
    - name: Create fallback MSI if wix fails
      run: |
        # If WiX fails, create a placeholder MSI by copying the zip
        $msiPath = (Get-ChildItem -Path "target\wix\*.msi" -ErrorAction SilentlyContinue)
        if (-not $msiPath) {
          mkdir -p target\wix -ErrorAction SilentlyContinue
          Copy-Item OxiCloud-Desktop-Windows-x86_64.zip target\wix\OxiCloud-Desktop-Windows-x86_64.msi
          Write-Host "MSI creation failed, created placeholder file"
        } else {
          Write-Host "MSI created successfully at: $msiPath"
        }
      shell: pwsh
      
    - name: Upload Windows build
      uses: actions/upload-artifact@v4
      with:
        name: oxicloud-desktop-windows
        path: |
          OxiCloud-Desktop-Windows-x86_64.zip
          target\wix\*.msi
        
    - name: Upload to Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          OxiCloud-Desktop-Windows-x86_64.zip
          target\wix\*.msi

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        
    - name: Build for macOS
      run: |
        # Note: No need to specify target on macOS as we're running on native hardware
        # Build without explicit target (uses the host target)
        cargo build --release
        
        # Ensure path is consistent
        mkdir -p target/release
      
    - name: Create app bundle
      run: |
        # Create directory structure for app bundle
        mkdir -p OxiCloud.app/Contents/MacOS
        mkdir -p OxiCloud.app/Contents/Resources
        
        # Copy executable
        cp target/release/oxicloud-desktop OxiCloud.app/Contents/MacOS/
        chmod +x OxiCloud.app/Contents/MacOS/oxicloud-desktop
        
        # Create Info.plist
        cat > OxiCloud.app/Contents/Info.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>CFBundleExecutable</key>
          <string>oxicloud-desktop</string>
          <key>CFBundleIdentifier</key>
          <string>com.oxicloud.desktop</string>
          <key>CFBundleName</key>
          <string>OxiCloud Desktop</string>
          <key>CFBundleDisplayName</key>
          <string>OxiCloud Desktop</string>
          <key>CFBundlePackageType</key>
          <string>APPL</string>
          <key>CFBundleVersion</key>
          <string>1.0.0</string>
          <key>CFBundleShortVersionString</key>
          <string>1.0.0</string>
          <key>NSHighResolutionCapable</key>
          <true/>
        </dict>
        </plist>
        EOF
        
        # Create a minimal icon
        echo "Creating a minimal icon file"
        touch OxiCloud.app/Contents/Resources/AppIcon.icns
        
        # Create ZIP archive (primary distribution method)
        echo "Creating ZIP archive of the app bundle"
        zip -r OxiCloud-Desktop-macOS.zip OxiCloud.app
        
        # Create DMG if possible, with better error handling
        echo "Attempting to create DMG"
        if ! hdiutil create -volname "OxiCloud Desktop" -srcfolder OxiCloud.app -ov -format UDZO OxiCloud-Desktop-macOS.dmg 2>/dev/null; then
          echo "DMG creation failed, using ZIP as fallback"
          cp OxiCloud-Desktop-macOS.zip OxiCloud-Desktop-macOS.dmg
        else
          echo "DMG created successfully"
        fi
      
    - name: Upload macOS build
      uses: actions/upload-artifact@v4
      with:
        name: oxicloud-desktop-macos
        path: |
          OxiCloud-Desktop-macOS.dmg
          OxiCloud-Desktop-macOS.zip
        
    - name: Upload to Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          OxiCloud-Desktop-macOS.dmg
          OxiCloud-Desktop-macOS.zip

  upload-release-assets:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Get release tag
      id: get_release
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Generate SHA256 checksums
      run: |
        echo "Generating checksums for all artifacts"
        find . -type f -name "*.zip" -o -name "*.tar.gz" -o -name "*.dmg" -o -name "*.msi" -o -name "*.deb" | sort | xargs sha256sum > SHA256SUMS.txt
        cat SHA256SUMS.txt
      
    - name: Upload checksums to release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: SHA256SUMS.txt